1. Introducción a PHP
*Presentación del curso
    Bienvenido al **Curso de Introducción a PHP ** en este curso el profesor Héctor Benitez, @HectorBenitez en Twitter, te ira enseñando los fundamentos de PHP mientras desarrollas un proyecto que servirá de sitio web personal.

    En este curso veremos:

    Programación orientada a Objetos.
    Conexión a bases de datos.
    Usaremos los estándares de PHP.
    Implementaremos librerías de terceros.
    Estructuraremos nuestro proyecto de una forma muy profesional que te servirá para futuros proyectos.
    Utilizaremos la versión 7.2 de PHP.

*¿Qué es PHP?
    PHP es un lenguaje de programación de propósito general de alto nivel que fue diseñado especialmente para el desarrollo de aplicaciones web.

    Es interpretado, multiplataforma, open source, el cual ha sido muy popular en los últimos años.

    ¿Qué NO es PHP?

    No es un lenguaje compilado, por lo cual siempre tendrás que llevar juntos tu código y tu interprete.
    No esta diseñado para realizar aplicaciones de escritorio.
    Para trabajar con PHP instalaremos un entorno de desarrollo llamado XAMPP, no es un entorno pensado para producción.

*Setup y Herramientas
    https://www.apachefriends.org/es/index.html

2. Conceptos Básicos de PHP
*¿Dónde guardar el template de esta clase?
    Descarga los archivos en tu computadora (encuentra el repositorio en pestaña de archivos).
    Ingresa a htdocs dentro de XAMPP. Debe aparecer: C:/xampp/htdocs/
    Crea y nombra una nueva carpeta. (ejemplo: cursophp)
    Copia los archivos del template (index.html y style.css).
    Escribe la ruta en tu navegador localhost/cursophp (usa el nombre que estableciste para tu carpeta).
    Nota: recuerda activar Apache y MySQL en el panel de control de XAMPP.

*Sintaxis de PHP
    Hagamos el ejemplo más sencillo para trabajar con PHP. Siempre que usemos PHP usaremos lo siguiente: <?php ?> todo lo que pongamos dentro de esto será lo que el servidor va a interpretar como código php, lo que esté fuera lo ignorará.

    Para acceder a él lo haremos localhost:8080/hello.php porque el servidor abre por defecto el archivo index y nuestro nuevo archivo se llama hello.php.

    Si queremos escribir código php en nuestra vista HTML tendremos que cambiarle la extensión al archivo por .php porque nuestro servidor esta configurado a solo interpretar archivos PHP. Solo las partes dentro de <?php ?> van a ser interpretadas y su código fuente no será visible desde el navegador.

    Todas las sentencias de código se separarán con un ; (punto y coma).

*Variables tipos de datos y cadenas
    Una variable puede ser una pequeña cajita en la que puedes almacenar un valor y este lo pueden usar para realizar alguna operación.

    Para declararla usaremos el símbolo de $ y en seguida el nombre, este puede ser un _ o una letra.

    PHP no es estáticamente tipado, es decir que no tenemos que decirle qué tipo de dato es esa variable. Además, es débilmente tipado porque podemos fácilmente cambiar el tipo de dato, es decir PHP ejecuta una conversión de datos interna.

    Al momento de trabajar con PHP una cosa muy importante es hacer debugging a nuestras variables, para ello utilizamos la función var_dump(); pasándole por parámetro la variable a revisar.

    En PHP tenemos dos tipos de cadenas, las que son con comillas simples y las de comillas dobles. La diferencia entre estas dos cadenas es que la de comillas simples recibe de forma literal lo que le escribas mientras que la de comillas dobles intenta interpretar cualquier variable dentro de ella.

    Comillas Simples : Todo lo que se encuentre dentro de las comillas simples es interpreado como texto plano. Ejemplo:
    $apellido = 'Castañeda';
    $nombre = 'Carlos $apellido'; //Resultado: Carlos $apellido
    Comillas Dobles : PHP Intenta interpretar todo lo que encuentre dentro de las comillas dobles. Se pueden usar otras variables. Ejemplo:
    $apellido = 'Castañeda';
    $nombre = "Carlos $apellido"; //Resultado: Carlos Castañeda

*Tipos de Datos en PHP
    PHP cuenta con muchos tipos de datos, sin embargo, en este momento nos vamos a enfocar en los más importantes y utilizados que son boolean, integer, float, string, array y NULL.

    Tipos escalares:
        boolean:
            Representa solamente un valor verdadero o falso. http://php.net/manual/es/language.types.boolean.php
            Valores válidos: true (verdadero) false (falso)
            <?php
            $a = true; 
            $b = false; 
            ?>
        Integer:
            Representa un número entero positivo, negativo o 0. http://php.net/manual/es/language.types.integer.php
            <?php
            $a = -123;
            $b = 0;
            $c = 7763;
            ?>
        float o double:
            Representa un número de punto flotante, existen problemas de precisión con los números flotantes debido a la naturaleza binaria de las computadoras. http://php.net/manual/es/language.types.float.php
            <?php
            $a = 12.24; 
            $b = 1.5e3; 
            $c = 7E-10;
            ?> 
        string:
            – Representa una cadena de caracteres.
            – Existen 4 formas de representar una cadena. Las 2 principales son usando comillas simples o comillas dobles.
            ---- Usando comillas simples donde el texto será exactamente como se escribe.
            ---- Usando comillas dobles permite usar caracteres de escape y además expanden los nombres de las variables, es decir sustituye el valor de las variables dentro de las cadenas.
            – Hay 2 formas adicionales llamadas Heredoc y Nowdoc que sirven para crear cadenas de múltiples líneas.

            Si quieres conocer más de este tipo de dato da click aquí.
            https://www.php.net/manual/es/language.types.string.php#language.types.string.details
            <?php
            $a = ”Hola”; 
            $b = ‘Mundo’; 
            ?>
    Tipos compuestos:
        array:
            Representa una colección de valores, aunque por defecto PHP usara índices numéricos, la realidad es que la estructura se representa como un mapa que colecciona pares llave-valor. La sintaxis para definir un arreglo será a partir de corchetes cuadrados, aunque en versiones anteriores de PHP era necesario usar la función array(). Las llaves pueden ser enteros o cadenas y los valores pueden ser de cualquier tipo de PHP, incluso de tipo array. http://php.net/manual/es/language.types.array.php
            <?php
            $array = array(
                "curso1" => "php",
                "curso2" => "js",
            );

            // a partir de PHP 5.4
            $array = [
                "curso1" => "php",
                "curso2" => "js",
            ];

            // índices numéricos
            $array = [
                "php",
                "js",
            ];
            ?>
        object:
            Representa una instancia de una clase. Este tema lo veremos más a fondo en la clase de Programación Orientada a Objetos.
            <?php
            class Car
            {
                function move()
                {
                    echo "Going forward..."; 
                }
            }

            $myCar = new Car();
            $myCar->move();
            ?>
        callable:
            Es un tipo de dato especial que representa a algo que puede ser “llamado”, por ejemplo una función o un método.
            <?php
            // Variable que guarda un callable
            $firstOfArray = function(array $array) {
                if (count($array) == 0) { return null; }
                return $array[0];
            };

            // Este es nuestro arreglo
            $values = [3, 2, 1];

            // Usamos nuestro callable y se imprime el valor 3
            echo $firstOfArray($values);
            ?>
        iterable:
            A partir de PHP 7.1 iterable es un pseudo tipo de datos que puede ser recorrido.
            <?php

            function foo(iterable $iterable) {
                foreach ($iterable as $valor) {
                    // ...
                } 
            }

            ?>
    Tipos especiales:
        resource:
            Es un tipo de dato especial que representa un recurso externo, por ejemplo un archivo externo a tu aplicación.
            <?php
            $res = fopen("c:\\dir\\file.txt", "r");
            ?>
        NULL:
            Es un valor especial que se usa para representar una variable sin valor. http://php.net/manual/es/language.types.null.php
            <?php
            $a = null; 
            ?>
            Reportar un problema
            Arreglos

*Arreglos

    Como vimos en la clase anterior almacenamos datos en una variable, ahora trataremos de almacenar más datos en una misma variable.

    Estas variables que almacenan más de un dato se conocen como arreglos y su sintaxis se va a indicar con [ ] (corchetes).

    PHP utiliza índices para localizar a los elementos dentro de la variable.

    La estructura de arreglos en PHP es conocida como mapa, lo que quiere decir que tiene una composición de llave valor. Además, un arreglo puede contener más arreglos y cada uno de ellos seguirá la misma estructura.

    Algo que debes saber es que en PHP podrás almacenar diferentes tipos de datos en un mismo arreglo.

*Condicionales y Ciclos
    Las condiciones nos permiten tomar decisiones en el código, si se cumple la condición entonces se ejecutarán ciertas instrucciones sino se cumple se ejecutarán otras. Estas se denotan por la instrucción if else.

    Los ciclos funcionan de la mano con las condiciones, en este caso si se cumple la instrucción se estará ejecutando repetidas veces una instrucción dada.

    Hemos agregado los jobs de forma manual accediendo al arreglo a través de sus índices, hacer esto podría traer errores y no podríamos controlarlo si tuviéramos muchos jobs. Ahora veamos una mejor forma de hacerlo con ciclos.
        El primero que tenemos es do while que va a involucrar la inicialización de variables y condiciones.
        El segundo que veremos es for que es una forma más simplificada de usar todos los elementos que componen los ciclos.

*While vs. Do While
    http://php.net/manual/es/control-structures.while.php
    http://php.net/manual/es/control-structures.do.while.php
    http://php.net/manual/es/control-structures.foreach.php

*Operadores, Condicionales, Continue y Break
    En PHP existen cuatro tipos principales de operadores:

        Aritméticos.
        Asignación.
        Condicionales.
        Incremento.

    Aprovechemos para practicar y veamos más sobre condiciones, en PHP tenemos el operador de comparación (==) y diferente de (!=).

    Tenemos la sentencia continue la cuál al ejecutarse hará que se itere a la siguiente línea del arreglo. Y la sentencia break que hará que el ciclo se termine.

*Operadores
    http://php.net/manual/es/language.operators.precedence.php
    http://php.net/manual/es/language.operators.arithmetic.php
    http://php.net/manual/es/language.operators.assignment.php
    http://php.net/manual/es/language.operators.comparison.php
    http://php.net/manual/es/language.operators.increment.php
    http://php.net/manual/es/language.operators.logical.php
    http://php.net/manual/es/language.operators.array.php
    $a += $b
    $a = $a + $b

    $a -= $b
    $a = $a - $b

    $a *= $b
    $a = $a * $b

    $a /= $b
    $a = $a / $b

    $a %= $b
    $a = $a % $b

    $a .= $b
    $a = $a . $b

    Operadores de incremento/decremento
    $a = 1;
    echo $a++;
    echo $a;
    echo ++$a;
    echo $a;
    imprime

    1
    2
    3
    3

*Ejercicios Operadores 
*Funciones