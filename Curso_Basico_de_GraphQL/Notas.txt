1. Introducción
--Introducción al curso y prerequisitos del curso
    Bienvenido al Curso Básico de GraphQL. En este curso el profesor Adrián Estrada, desarrollador Node.js trabajando para NodeSource, te mostrará las bases de GraphQL y por qué es tan importante en el mundo.
    Para este curso es necesario tener buenas bases de Node y conocimientos de bases de datos no relacionales como MongoDB. Puedes checar el Curso Básico de Node.js y el Curso Básico de MongoDB.
--¿Qué es GraphQL?
    En esta clase el profesor Adrián Estrada nos explica qué es GraphQL, su importancia y las ventajas que tiene.
    GraphQL es un nuevo paradigma aplicado para el intercambio de información entre diferentes aplicaciones. Anteriormente existían 
    protocolos como CORBA, SOAP, RPC y el más reciente y utilizado REST. GraphQL creado en el 2015 por Facebook puede ser visto como 
    una evolución al protocolo REST.

    Varias metodologias han sido reemplazadaspor algunas con mas ventajas como: CORBA,SOPA, RPC que fueron remplazadas de forma progresiva hasta llegar a la alternativa mas reciente y más usada actual, REST

    GraphQL cuenta con una forma estandarizada para definir todas las interacciones posibles con la información, aciendo posible que la manera de escribir y usar una API sea más predecible y entendible.

        ventajas
            1. Un lenguaje agnóstico que me permite definir de una forma clara y simple los objetos y acciones del API.
            2. Una validación autómatica de la información a ingresar
            3. Control de errores de una manera uniforme y predecible
            4. Una documentación mínima autogenerada que permite saber exactamente como debe ser usado el API tanto a la hora de pedir y enviar información
            5. Un entorno de desarrollo amigable donde se puede probar todas las interacciones.
        
        

2. Conceptos básicos
--Schema y types
    https://graphql.org/
    El Schema es la base de una API en GraphQL, es el encargado de describir todos los tipos de información que va a contener.
    Para la creación de este proyecto usaremos una herramienta llamada npx, para ello primero debes instalarlo con el coman
    npm i -g npx
    Una vez instalado, dentro de la carpeta de nuestro proyecto vamos a correr el siguiente comando:
    npx license mit > LICENSE && npx gitignore node && git init && npm init -y
    Ya que termina de correr el comando es momento de añadir la dependencia de GraphQL a nuestro proyecto:
    npm i graphql

    Dentro de GraphQL contamos con distintos tipos de datos escalares:
        String
        Int
        Float
        Boolean
        ID

    Ejecutamos
    node index.js

--Queries y Resolvers
https://graphql.org/learn/queries/
    Una query permite ejecutar una petición al API, dentro de una query debes indicar la consulta que quieres ejecutar y los campos que deseas obtener. 
    GraphQL te va a devolver la información que solicitaste dentro del objeto data.
    El resultado de tu petición no se va a ejecutar de manera mágica, para ello debes definir el objeto resolvers, este objeto va a contener una propiedad del 
    mismo nombre que la query que va a resolver o ejecutar.

--Sirviendo el API en la web
    Ya viste que nuestra API funciona a través de la línea de comandos, pero necesitamos que está funcione dentro de la web, para ello necesitas de las dependencias de express y un middleware de GraphQL, vamos a instalarlo con el siguiente comando:
    npm i express express-graphql
    Para evitar el proceso de detener nuestro servidor cada que ejecutamos un nuevo cambio vamos a utilizar la dependencia de desarrollo Nodemon:
    npm i nodemon -D
    Creamos el script
    npm run dev

--Custom Types
    Para este proyecto vamos a seguir el estándar de estilos Standard, para instalarlo corremos el siguiente comando:
    npm i standard -D

    GraphQL nos permite configurar nuestros propios tipos de datos, estos deben tener la siguientes sintaxis:
    type <Nombre del tipo> {
    propiedad: Tipo de dato
    }

    Dentro de nuestros tipos de datos podemos configurar un campo de un tipo como obligatorio con el signo “!”, quedando por ejemplo:
    type Course {
    title: String!
    }

--Argumentos
    Vamos a instalar una nueva dependencia para facilitar el trabajo con GraphQL, vamos a correr el siguiente comando:
    npm i graphql-tools
    Podemos pasar argumentos con distintos tipos de información dentro de las peticiones que hagamos en GraphQL, su sintaxis quedaría de la siguiente manera:
    nombreQuery(campo: tipo): tipo
    Dentro del resolver los argumentos de la petición pasarían como segundo parámetro, el primero es root y el segundo es args.

--Configuración de base de datos
    Por el momento nuestra API maneja pura información estática, vamos a cambiar esto pasando la información a una base de datos, en este caso usaremos MongoDB.
    Es recomendable almacenar las credenciales de conexión a la base de datos como variables de entorno del sistema y utilizar dotenv para la lectura de dichas credenciales. Para su instalación vamos a correr el comando
    npm i dotenv
