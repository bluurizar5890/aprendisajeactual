Curso de React.js
1. Introducción a React.js
*¿Qué es React.js?
    React cumple su función como biblioteca ya que para utilizar su código se debe importar. También es un Framework aunque las convenciones de cómo debe ser organizado todo no son estrictas.
    En este curso aprenderás las prácticas que la comunidad ha decidido que son buenas.

    React es declarativo, lo que quiere decir que se le indica qué debe hacer pero no cómo debe hacerse, ahorrando de esta manera muchos pasos.

    JSX es HTML dentro de Javascript, esto se verá más adelante en detalle.

    React está estructurado por componentes que son como pequeños bloques de lego que al ser unidos forman aplicaciones de React. Estos componentes pueden tener estilos, ser enlazados a eventos y sus estados pueden ser modificados.

    Con React también se tiene la ventaja de que será escrito una sola vez y podrá ser utilizado en aplicaciones web, móviles, entre otras.

*Pre-requisitos
    Estos son los conocimientos que deberás tener antes de comenzar con este curso:

        Desarrollo web online: Esto implica tener familiaridad y fortaleza en el uso de HTML y CSS.
        Javascript: React es Javascript. Es importante saber usar Javascript en el navegador. Es deseable conocer JQuery y saber sobre promesas, clases y tener conocimientos sobre asincronía.
        Terminal: La línea de comandos es indispensable para instalar herramientas, correr servidores y hacer diversas tareas.


*Herramientas que usaremos
    Estas son las herramientas que usaremos en el curso:

        Navegador: Especialmente Chrome ya que cuenta con óptimas herramientas de desarrollo.
        React Developer Tools: Es una herramienta Open Source creada por Facebook y tiene instalación para Chrome o Firefox. Nos dejará ver el código de React inspeccionando elementos.
        Editor de texto: Puedes usar cualquiera, en este curso sugerimos Visual Studio Code. Tiene muchos plugins útiles para el desarrollo.
        Prettier: Es un plugin que hace que el código se vea bien sin importar cómo esta escrito.

*Create-react-app
    Create-react-app es una aplicación moderna que se usa desde una línea de comando. Antes de ella se configuraba todo el entorno manualmente lo cual tomaba mucho tiempo.

    Pasos para obtenerlo:
    Se debe instalar desde la línea de comando usando
    npm install -g create-react-app

    Una vez instalado se crea la carpeta del proyecto con
    create-react-app -nombre del proyecto-

    En este punto se estará instalando React y otras herramientas, también se configurará el entorno usando Webpack.

    Una vez se instala todo entra a la carpeta src donde estará todo el código fuente de la aplicación, siendo el más importante index.js que es el punto de entrada a la aplicación.

    Finalmente para correr la aplicación se usa el comando
    npm run start

    Otras herramientas:

        Babel: Traduce Javascript moderno (JSX) a un Javascript que todos los navegadores puedan interpretar.
        Eslint: Lee el código y avisa de errores.


        comandos
        Para poder crear aplicaciones en react y que nos cree la estructura
            npm install -g create-react-app
        Crear proyecto  
            create-react-app hello-react

2. Fundamentos

*Clonar el código de GitHub
    Clonar el código de GitHub

    En esta clase vamos a comenzar clonando el código del proyecto del repositorio en GitHub.

    Es importante que tú y yo tengamos un punto de partida en común. Así vamos a poder asegurarnos que cada cambio que yo haga en el código, tú también lo recibas.

    Para hacer esto, en la terminal ve a una carpeta donde quieras que exista el proyecto. Entonces escribes lo siguiente:
    $ git clone https://github.com/Sparragus/platzi-badges.git
    Eso va a clonar el repositorio del curso a una carpeta llamada platzi-badges.

    Ahora es necesario que te muevas a esa carpeta.

    $ cd platzi-badges

    Ahora necesitamos instalar todas las dependencias necesarias para poder correr el proyecto. Lo haremos utilizando npm.

    $ npm install

    Este proceso puede tardar un poco. Lo que esta haciendo es descargando todas las bibliotecas de código que el proyecto necesita.

    Una vez haya concluido, estamos listos para echar a correr el servidor. Lo hacemos con el comando

    $ npm run start

    Cuando el servidor comience, automáticamente va a abrir una pantalla en el navegador con la aplicación.

    Si todo salió bien, vas a ver una pantalla que dice “Hello, Platzi Badges”.

    En la próxima clase vas a aprender como fue que “Hello, Platzi Badges” llegó desde el código hasta la pantalla de tu navegador.

    Aquí encuentras el repositorio.
    
    git reset --hard ba74f3a //Reseteamos al commit inicial


*ReactDOM.render

    React y ReactDOM trabajarán en conjunto.
        React como análogo a createElement
        ReactDOM a appendChild

    ReactDOM.render() toma dos argumentos: Qué queremos renderizar y dónde lo queremos renderizar.
ReactDOM.render(El que,Donde);
    Siempre que escribas JSX es requisito importar React.


*JSX
    JSX es una extensión de JavaScript creada por Facebook para el uso con la biblioteca React. Sirve de preprocesador (como Sass o Stylus a CSS) y transforma el código generado con React a JavaScript.

    JSX tiene su alternativa que es React.createElement pero es preferible JSX porque es mucho más legible y expresivo. Ambos tienen el mismo poder y la misma capacidad.

    React.createElement recibe 3 argumentos:

        El tipo de elemento que estamos creando
        sus atributos o props
        y el children que es el contenido.

    Ejemplo:
    React.createElement(‘a’, { href: ‘https://platzi.com’ }, ‘Ir a Platzi’);

    En JSX se utilizan las llaves para introducir variables o expresiones de Javascript. Lo que sea que esté adentro se va a evaluar y su resultado se mostrará en pantalla.

    Las expresiones pueden ser llamadas a otras funciones, cálculos matemáticos, etc. Si las expresiones son false, 0, null, undefined, entre otros, no se verán.

    const jsx=<h1>Hola soy {Expressiones}</h1>
    Si las expresiones terminan siendo falso no se van a ver 

*¿Qué es un componente?
    Los componentes en React son bloques de construcción.
    Las aplicaciones hechas con React son como figuras de Lego. Junta varias piezas (componentes) y puedes construir un website tan pequeño o tan grande como quieras.
    Los componentes serán barras de búsquedas, enlaces, encabezados, el header, etc.

    ”Componente” vs “elemento
    Un elemento es a un objeto como un componente es a una clase. Si el elemento fuera una casa, el componente serían los planos para hacer esa casa.

    Identificación de componentes
    Para identificarlos debes hacerte las siguientes preguntas:

        ¿Qué elementos se repiten? Estos son los elementos en una lista o los que comparten aspecto visual y su funcionalidad
        ¿Qué elementos cumplen una función muy específica? Estos sirven para encapsular la lógica y permiten juntar muchos comportamientos y aspectos visuales en un solo lugar.

    Identificar componentes es una habilidad esencial para poder desarrollar aplicaciones de React.
    Un componentes es nuestra unidad básica de desarrollo

*Qué es y cómo funciona un componente en React.js
        En esta clase aprenderás acerca del ciclo de vida de los componentes en React para crear aplicaciones dinámicas. Desde la importancia del montaje cuando los usuarios llegan por primera vez a nuestra aplicación, hasta la actualización y desaparición de los componentes.

*Nuestro primer componente
    Es una buena práctica que los componentes vivan en su propio archivo y para ello se les crea una carpeta.
    Todos los componentes requieren por lo menos el método render que define cuál será el resultado que aparecerá en pantalla.
    El source de las imágenes en React puede contener direcciones en la web o se le puede hacer una referencia directa importándola. Si se importa deben usarse llaves para que sea evaluado.

*Cómo aplicar estilos

    Para los estilos crearemos una carpeta llamada Styles y allí vivirán todos los archivos de estilos que tienen que ver con los componentes.
    Para usar los estilos es necesario importarlos con import
    React funciona ligeramente diferente y para los atributos de clases no se utiliza class sino className
    Es posible utilizar Bootstrap con React, sólo debe ser instalado con npm install bootstrap y debe ser importado en el index.js
    Existen estilos que son usados de manera global o en varios componentes, así que deben ser importados en el index.js

3. Creación y diseño de componentes
*Cómo aplicar estilos
    Para los estilos crearemos una carpeta llamada Styles y allí vivirán todos los archivos de estilos que tienen que ver con los componentes.
    Para usar los estilos es necesario importarlos con import
    React funciona ligeramente diferente y para los atributos de clases no se utiliza class sino className
    Es posible utilizar Bootstrap con React, sólo debe ser instalado con npm install bootstrap y debe ser importado en el index.js
    Existen estilos que son usados de manera global o en varios componentes, así que deben ser importados en el index.js

    Instalamos bootstrap
    npm install bootstrap

    En react se utiliza className no class

*Props
    Los props que es la forma corta de properties son argumentos de una función y en este caso serán los atributos de nuestro componente como class, src, etc.

    Estos props salen de una variable de la clase que se llama this.props y los valores son asignados directamente en el ReactDOM.render().
    props =>propiedades

*Nuestra primera página
    Las páginas en React son componentes y conseguir distinguirlas nos servirá para saber que es un componente que adentro lleva otros componentes.

        Al escribir los props no importa el orden en el que lo hagas, únicamente importa el nombre.

*Enlazando eventos
    React dispone de eventos. Cada vez que se recibe información en un input se obtiene un evento onChange y se maneja con un método de la clase this.handleChange
    Los elementos button también tienen un evento que es onClick.
    Cuando hay un botón dentro de un formulario, este automáticamente será de tipo submit. Si no queremos que pase así hay dos maneras de evitarlo:
     especificando que su valor es de tipo button o manejándolo desde el formulario cuando ocurre el evento onSubmit.

*Manejo de estado
    Hasta esta clase todos los componentes han obtenido su información a través de props que vienen desde afuera (otros componentes) pero hay otra manera en la que los componentes pueden producir su propia información y guardarla para ser consumida o pasada a otros componentes a través de sus props. La clave está en que la información del state a otros componentes pasará en una sola dirección y podrá ser consumida pero no modificada.

    Para guardar la información en el estado se usa una función de la clase component llamada setState a la cual se le debe pasar un objeto con la información que se quiere guardar.
    Aunque no se ve, la información está siendo guardada en dos sitios. Cada input guarda su propio valor y al tiempo la está guardando en setState, lo cual no es ideal. Para solucionarlo hay que modificar los inputs de un estado de no controlados a controlados.

La información por default se guarda en el state y tambien en el input ya que estos son no controlados

*Levantamiento del estado
    Levantar el estado es una técnica de React que pone el estado en una localización donde se le pueda pasar como props a los componentes. 
    Lo ideal es poner el estado en el lugar más cercano a todos los componentes que quieren compartir esa información.

    Algo interesante que le da el nombre a React es su parte de “reactivo” ya que cada vez que hay un cambio en el estado o en los props que 
    recibe un componente se vuelve a renderizar todo el componente y todos sus descendientes.

    React es reactivo => eso quiere que cada vez que hay un cambio en el estado o en los props que recibe un componente se vuelve a renderizar todo el componenete y todos sus descendientes 
                        Cada vez que el state cambia se va BadgeNew y tambien se va volver a renderizar BadgeForm

*Listas de componentes


4. React Router
    Introducción a React Router

    Las aplicaciones que se trabajan en React son llamadas single page apps. Esto es posible gracias a React Router que es una librería Open Source.

    Multi Page Apps: Cada página implica una petición al servidor. La respuesta usualmente tiene todo el contenido de la página.

    Single Page Apps (SPA): Aplicaciones que cargan una sola página de HTML y cualquier actualización la hacen re-escribiendo el HTML que ya tenían.

    React Router (v4): Nos da las herramientas para poder hacer SPA fácilmente. Usaremos 4 componentes:

        BrowserRouter: es un componente que debe estar siempre lo más arriba de la aplicación. Todo lo que esté adentro funcionará como una SPA.
        Route: Cuando hay un match con el path, se hace render del component. El component va a recibir tres props: match, history, location.
        Switch: Dentro de Switch solamente van elementos de Route. Switch se asegura que solamente un Route se renderize.
        Link: Toma el lugar del elemento <a>, evita que se recargue la página completamente y actualiza la URL.

*División de la aplicación en rutas
    
    Para instalar React Router lo hacemos desde la terminal con npm install react-router-dom. Como es importante usar exactamente la misma versión, del package.json en “dependencies” se quita lo que está delante del 4.

    Link internamente tiene un elemento <a> pero va a interceptar el clic para navegar de manera interna sin refrescar toda la página.
    Instalamos React -router //Hay varias versiones pero dom vamos a utilizar en los navegadores
    npm install react-router-dom

    en el Route se debe de expecificar que la ruta es exacta
    Para utlizar Router de una manera eficiente se debe de utilizar link en vez de <a></a> y asi evitar que cargue toda la página

*Mejorando la User Interface con un Layout
    Aquí encuentras el archivo para hacer el reto que propone el profesor al final de la clase

    React.Fragment es la herramienta que te ayudará a renderizar varios componentes y/o elementos sin necesidad de colocar un div o cualquier otro elemento de HTML para renderizar sus hijos. Al usar esta característica de React podremos renderizar un código más limpio y legible, ya que ``React.Fragment` no se renderiza en el navegador.

    El 404 es la ruta que se renderizará cuando ninguna otra coincida con la dirección ingresada.

    Otra forma de hacer que todas tus URL’s que no existan sean redirigidas a tu componente de 404 sería de la siguiente forma:

    import { Redirect, Route } from "react-router-dom";

    <Route path="/404" component={MiComponente404} />
    <Redirect from="*" to="/404" />
    Como podemos observar llamamos a nuestro componente 404 y luego utilizamos Redirect, el cual es un componente de React Router para hacer redirecciones; en este caso hacemos que todas las URL’s que no correspondan a alguna que hayamos declarado, sean redirigidas a MiComponente404.
    Para evaluar se debe de colocar en llaves

    Siempre que regresamos el elemento en el render tenemos que regresar un solo elemento
    se pueden utilizar divs o React.Fragment


5. Component Lifecycle
*Introducción del ciclo de vida de un componente
        Cuando React renderiza los componentes decimos que entran en escena, cuando su estado cambia o recibe unos props diferentes se actualizan y cuando cambiamos de página se dice que se desmontan.

        Montaje:
            Representa el momento donde se inserta el código del componente en el DOM.
            Se llaman tres métodos: constructor, render, componentDidMount.
            
        Actualización:
            Ocurre cuando los props o el estado del componente cambian.
            Se llaman dos métodos: render, componentDidUpdate.
      
        Desmontaje:
            Nos da la oportunidad de hacer limpieza de nuestro componente.
            Se llama un método: componentWillUnmount.


*Práctica del ciclo de vida
    En el contructor es donde se debe de inilializar el estado

6. Llamadas a un API
*Introducción llamadas a un API
    Las llamadas a una API siguen un patrón similar siempre que las hacemos, cada llamada consta de tres estados:
        Loading: cuando la petición se envía y estamos esperando.
        Error: se debe dejar un mensaje para el usuario para arreglar el error o volver a intentarlo.
        Data: los datos nos pueden llegar de dos formas, o en error o con los datos requeridos.

*React.js: Cómo traer datos de un API en React
    Una llamada a una API es un proceso asíncrono, es decir que lo comenzamos pero no sabemos
    cuándo acabará. Por lo mismo la función a escribir debe ser asíncrona.
    La llamada se hará usando fetch que es una función de JavaScript que al pasarle una dirección de 
    internet, hará una petición GET y lo que sea que exista ahí será devuelto.

    https://rickandmortyapi.com/documentation/
    https://codesandbox.io/s/k9v52roz6o
    https://k9v52roz6o.codesandbox.io/
    https://rickandmortyapi.com/
    https://rickandmortyapi.com/api/character/

*Solicitando datos (GET)
*Mejorando la Experiencia de Usuario durante una petición
*Enviando datos (POST)
    MD5 es una pequeña librería a la cual se le da un texto y ella regresa un hash.

    Podremos hacer pruebas para cifrar nuestros textos a md5 en el siguiente sitio MD5 Online

    Hola Platzi = d3bfb9302fb1007c0f996b41cba2818c

    Gravatar nos permite obtener la imagen en basea un md5 del correo
    http://www.gravatar.com/avatar/56ff7362a120ac0231f758312b745d16
    Instalamons mdg 
    npm install md5

*Manejando los estados de la petición durante el POST
    De la misma manera en la que se manejan los estados cuando se solicitan datos, deben ser manejados cuando los datos son enviados.


    Existe un tiempo entre que se da clic y los datos son enviados. Ese tiempo de espera es necesario visualizarlo. Igual hay que mostrar mensajes de error cuando no funcionan las cosas.

    Para levnatar el proyecto y la api escribimos npm start


*Actualizando datos (PUT)
*Actualizaciones automáticas
    Polling consiste en que cada cierto tiempo que es definido por nosotros se buscan los datos y se actualizan automáticamente. Esto se hará constantemente hasta que el usuario se vaya de la página.

7. Mejorando la UI
*Los detalles de un Badge
*UI Components y Container Components
    En la programación es bueno separar las tareas en diferentes funciones y en React sucede lo mismo. Cuando un componente hace demasiado, probablemente es mejor dividirlo en dos.
    Esta técnica de componentes presentacionales y componentes container es común, útil y hace parte de las buenas prácticas.
    Las funciones que no son extendidas no hacen modificaciones del estado

*Portales
    Hay momentos en los que queremos renderizar un modal, un tooltip, etc. Esto puede volverse algo complicado ya sea por la presencia de un z-index o un overflow hidden.
    En estos casos lo ideal será renderizar en un nodo completamente aparte y para esto React tiene una herramienta llamada Portales que funcionan parecido a ReactDOM.render; se les dice qué se desea renderizar y dónde, con la diferencia de que ese dónde puede ser fuera de la aplicación.
    {ReactDOM.createPortal(El que,el donde)}
    para crear un modal 
      {ReactDOM.createPortal(<h1>Realmente no estoy aqui</h1>,
                        document.getElementById('modal'))}
    se debe de crear un nuevo div con id modal en index.html que se encuentra en public

*Modales
    La técnica de usar componentes genéricos para crear uno nuevo especializado se llama composición y es una herramienta que todo buen programador debe saber utilizar.
    Los componentes funcionales no tienen manejo de estado

*Hooks
    Las funciones no tienen un estado propio que manejar como ciclos de vida a los que deben suscribirse, mientras tanto las clases sí cuentan con ello.

    React tiene un feature llamado Hooks que permite que las funciones también tengan features que solamente tienen las clases.

    Hooks: Permiten a los componentes funcionales tener características que solo las clases tienen:

    useState: Para manejo de estado.
    useEffect: Para suscribir el componente a su ciclo de vida.
    useReducer: Ejecutar un efecto basado en una acción.
    Custom Hooks: Usamos los hooks fundamentales para crear nuevos hooks custom. Estos hooks irán en su propia función y su nombre comenzará con la palabra use. Otra de sus características es que no pueden ser ejecutados condicionalmente (if).

    useState regresa un arreglo de dos argumentos.

*Search filter
*Conclusión